using Mavim.Manager.Api.Topic.Controllers.v1;
using Mavim.Manager.Api.Topic.Services.Interfaces.v1;
using Mavim.Manager.Api.Topic.Services.Interfaces.v1.enums;
using ServicesModels = Mavim.Manager.Api.Topic.Services.v1.Models;
using Mavim.Manager.Api.Topic.v1.Models;
using Microsoft.AspNetCore.Mvc;
using Moq;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Xunit;

namespace Mavim.Manager.Api.Topic.Test.Controllers.v1
{
    public class TopicsControllerTest
    {
        const string DCVID = "d5926266c2v0";

        #region GetPathToRoot
        [Fact]
        [Trait("Category", "Topic")]
        public async Task GetPathToRoot_ValidArguments_OkObjectResult()
        {
            // Arrange
            var serviceMock = new Mock<ITopicService>();
            serviceMock.Setup(service => service.GetPathToRoot(It.IsAny<string>())).ReturnsAsync(new ServicesModels.TopicPath { Path = new List<IPathItem>(), Data = new List<ITopic>() });
            var controller = new TopicsController(serviceMock.Object);
            var dbid = Guid.Empty;

            // Act
            var actionResult = await controller.GetPathToRoot(dbid, DataLanguages.en, DCVID);

            // Assert
            serviceMock.Verify(mock => mock.GetPathToRoot(DCVID), Times.Once);

            Assert.NotNull(actionResult);
            var okObjectResult = actionResult.Result as OkObjectResult;
            Assert.NotNull(okObjectResult);
            var fieldsResult = okObjectResult.Value as ITopicPath;
            Assert.NotNull(fieldsResult);
        }
        #endregion

        #region ModelState
        [Theory, MemberData(nameof(ValidNames))]
        public void ModelState_ValidSaveTopic_ValidModalState(string name)
        {
            // Arrange
            var saveTopic = new ServicesModels.SaveTopic();
            saveTopic.Name = name;
            var context = new ValidationContext(saveTopic, null, null);
            var results = new List<ValidationResult>();
            TypeDescriptor.AddProviderTransparent(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(SaveTopic), typeof(SaveTopic)), typeof(SaveTopic));

            // Act
            var isModelStateValid = Validator.TryValidateObject(saveTopic, context, results, true);

            // Assert
            Assert.True(isModelStateValid);
        }

        [Theory, MemberData(nameof(InvalidNames))]
        public void ModelState_InvalidSaveTopic_ValidModalState(string name)
        {
            // Arrange
            var saveTopic = new SaveTopic();
            saveTopic.Name = name;
            var context = new ValidationContext(saveTopic, null, null);
            var results = new List<ValidationResult>();
            TypeDescriptor.AddProviderTransparent(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(SaveTopic), typeof(SaveTopic)), typeof(SaveTopic));

            // Act
            var isModelStateValid = Validator.TryValidateObject(saveTopic, context, results, true);

            // Assert
            Assert.False(isModelStateValid);
        }
        #endregion

        #region input parms
        public static IEnumerable<object[]> ValidNames
        {
            get
            {
                yield return new object[] { "Cars & Co" };
                yield return new object[] { "" };
                yield return new object[] {};
            }
        }

        public static IEnumerable<object[]> InvalidNames
        {
            get
            {
                yield return new object[] {};
            }
        }
        #endregion
    }
}
